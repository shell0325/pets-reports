datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum GenderType {
  MEN
  WOMEN
  OTHERS
}

enum LocationType {
  Hokkaido
  Aomori
  Iwate
  Miyagi
  Akita
  Yamagata
  Fukushima
  Ibaraki
  Tochigi
  Gunma
  Saitama
  Chiba
  Tokyo
  Kanagawa
  Niigata
  Toyama
  Ishikawa
  Fukui
  Yamanashi
  Nagano
  Gifu
  Shizuoka
  Aichi
  Mie
  Shiga
  Kyoto
  Osaka
  Hyogo
  Nara
  Wakayama
  Tottori
  Shimane
  Okayama
  Hiroshima
  Yamaguchi
  Tokushima
  Kagawa
  Ehime
  Kochi
  Fukuoka
  Saga
  Nagasaki
  Kumamoto
  Oita
  Miyazaki
  Kagoshima
  Okinawa
}

enum ShitType {
  TYPE1
  TYPE2
  TYPE3
  TYPE4
  TYPE5
  TYPE6
  TYPE7
}

enum ConditionType {
  GREAT_CONDITION
  GENERALLY_GOOD
  NORMAL
  NOT_FEELING_WELL
  SICK
}

enum CareType {
  Meal
  Toilet
  Hospital
  Medicine
  Salon
  Stroll
  Shopping
  Bath
  Others
}

enum EvaluationType {
  STAR1
  STAR2
  STAR3
  STAR4
  STAR5
}

enum CategoryType {
  Toy
  PetFood
  PetShop
  AnimalHospital
  Supplement
  IndoorGoods
  Bed
  Collar
  Wear
  OutingGoods
  CarrierBag
  DriveGoods
  DeodorantProducts
  CareProducts
  ToiletProducts
  DisciplineProducts
  NursingCareProducts
  PetHouse
  NameTag
  MiscellaneousGoods
}

model PUser {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(40)
  email       String        @unique @db.VarChar(80)
  password    String        @db.VarChar(255)
  gender      GenderType?
  age         Int?          @db.Int
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @default(now()) @updatedAt @map("updated_at")
  location    LocationType?
  PUserPet    PUserPet[]
  PBragging   PBragging[]
  PReview     PReview[]
  PLike       PLike[]
  PQuestion   PQuestion[]
  PRespondent PRespondent[]

  @@map("users")
}

model PPet {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(45)
  picture        String?      @db.VarChar(255)
  kinds          String       @db.VarChar(45)
  gender         GenderType
  birthday       DateTime     @db.DateTime(0)
  color          String       @db.VarChar(45)
  welcome_family DateTime     @db.DateTime(0)
  memo           String?      @db.LongText
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @updatedAt @map("updated_at")
  PUserPet       PUserPet[]
  PCondition     PCondition[]
  PBragging      PBragging[]
  PLike          PLike[]
  PCare          PCare[]
  PSpending      PSpending[]

  @@map("pets")
}

model PUserPet {
  id        Int      @id @default(autoincrement())
  user      PUser    @relation(fields: [userId], references: [id])
  userId    Int      @map("userId")
  pet       PPet     @relation(fields: [petId], references: [id])
  petId     Int      @map("pet_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("users_pets")
}

model PCondition {
  id              Int            @id @default(autoincrement())
  weight          Int?           @db.Int //体重
  length          Int?           @db.Int //体長
  temperature     Int?           @db.Int //体温
  shit            ShitType? //下痢
  shit_state      String?        @db.LongText //下痢の状態
  condition       ConditionType? //体調
  condition_state String?        @db.LongText //体調の状態
  vomiting        Boolean        @default(false) //嘔吐
  vomiting_state  String?        @db.LongText //嘔吐の状態
  pet             PPet           @relation(fields: [petId], references: [id])
  petId           Int            @map("pet_id")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @default(now()) @updatedAt @map("updated_at")

  @@map("conditions")
}

model PBragging {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255) //自慢タイトル
  content   String   @db.VarChar(255) //自慢内容
  picture   String?  @db.VarChar(255)
  user      PUser    @relation(fields: [userId], references: [id])
  userId    Int      @map("userId")
  pet       PPet     @relation(fields: [petId], references: [id])
  petId     Int      @map("pet_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("branggings")
}

model PReview {
  id         Int            @id @default(autoincrement())
  name       String         @db.VarChar(255) //レビュー対象の名前
  content    String         @db.VarChar(255) //レビュー内容
  category   CategoryType //レビュー対象のカテゴリ
  evaluation EvaluationType //評価
  picture    String?        @db.VarChar(255)
  user       PUser          @relation(fields: [userId], references: [id])
  userId     Int            @map("userId")
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @default(now()) @updatedAt @map("updated_at")

  @@map("reviews")
}

model PLike {
  id        Int      @id @default(autoincrement())
  user      PUser    @relation(fields: [userId], references: [id])
  userId    Int      @map("userId")
  pet       PPet     @relation(fields: [petId], references: [id])
  petId     Int      @map("pet_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("likes")
}

model PQuestion {
  id             Int           @id @default(autoincrement())
  title          String        @db.VarChar(255) //質問のタイトル
  content        String        @db.LongText //質問の内容
  question_genre String        @db.VarChar(50) //質問のジャンル
  question_time  DateTime      @db.DateTime(0) //質問した時間
  answered       Boolean       @db.TinyInt //回答済みかどうか
  user           PUser         @relation(fields: [userId], references: [id])
  userId         Int           @map("userId")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @default(now()) @updatedAt @map("updated_at")
  PRespondent    PRespondent[]

  @@map("questions")
}

model PRespondent {
  id         Int       @id @default(autoincrement())
  content    String    @db.LongText //質問回答の内容
  user       PUser     @relation(fields: [userId], references: [id])
  userId     Int       @map("userId")
  question   PQuestion @relation(fields: [questionId], references: [id])
  questionId Int       @map("question_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("respondents")
}

model PCare {
  id        Int      @id @default(autoincrement())
  name      CareType //世話の名前
  content   String   @db.LongText // 世話の内容
  time      DateTime @db.Timestamp() //世話した時間
  memo      String?  @db.LongText
  pet       PPet     @relation(fields: [petId], references: [id])
  petId     Int      @map("pet_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("cares")
}

model PSpending {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(255) //支払いしたものの名前
  category      String   @db.VarChar(50) //支払いのカテゴリ
  amount        Int      @db.Int //支払いした金額
  spending_date DateTime @db.DateTime(0) //支払い日時
  pet           PPet     @relation(fields: [petId], references: [id])
  petId         Int      @map("pet_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("spendings")
}
